{"version":3,"sources":["logo.png","Okazejoj sync /.json$","Okazejoj/index.js","Aferoj/Navbaro.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","map","./en.json","./eo.json","./fr.json","webpackContext","req","id","webpackContextResolve","e","Error","code","keys","Object","resolve","ctx","require","obj","eo","forEach","sxlosilo","substr","cxenoj","LocalizedStrings","Navbaro","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","fiksuLingvon","k","_this2","react_default","a","createElement","Navbar","bg","expand","variant","Container","Brand","Link","to","cxefoj","esperantujo","Toggle","aria-controls","Collapse","Nav","className","onSelect","traktuElekton","NavDropdown","title","okazejo","Item","eventKey","hejmo","pri","kial","Form","inline","href","target","style","marginLeft","lerni","React","Component","App","localStorage","getItem","setLanguage","setItem","console","log","setState","BrowserRouter","Fragment","Navbaro_Navbaro","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ce11c5b2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.f47058d3.png\";","var map = {\n\t\"./en.json\": 65,\n\t\"./eo.json\": 66,\n\t\"./fr.json\": 67\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tvar id = map[req];\n\tif(!(id + 1)) { // check for number or string\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn id;\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 64;","import LocalizedStrings from 'react-localization'\r\n\r\nvar ctx = require.context('.', true, /\\.json$/)\r\n\r\nvar obj = { eo: {} }\r\nctx.keys().forEach(sxlosilo => {\r\n  obj[sxlosilo.substr(2, 2)] = ctx(sxlosilo)\r\n})\r\n\r\nlet cxenoj = new LocalizedStrings(obj)\r\n\r\nexport default cxenoj\r\n","import React from 'react'\r\n\r\nimport {\r\n  Button,\r\n  Container,\r\n  Navbar,\r\n  Nav,\r\n  NavDropdown,\r\n  Form\r\n} from 'react-bootstrap'\r\n\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport Logo from '../logo.png'\r\n\r\nimport cxefoj from '../Okazejoj'\r\n\r\nexport default class Navbaro extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.fiksuLingvon = props.fiksuLingvon\r\n  }\r\n  traktuElekton(k) {\r\n    this.fiksuLingvon(k)\r\n  }\r\n  render() {\r\n    return (\r\n      <Navbar bg='light' expand='lg' variant='light'>\r\n        <Container>\r\n          <Navbar.Brand>\r\n            <Link to='/'>{cxefoj.esperantujo}</Link>\r\n          </Navbar.Brand>\r\n          <Navbar.Toggle aria-controls='basic-navbar-nav' />\r\n          <Navbar.Collapse id='basic-navbar-nav'>\r\n            <Nav className='mr-auto' />\r\n            <Nav onSelect={k => this.traktuElekton(k)}>\r\n              <NavDropdown title={cxefoj.okazejo} id='basic-nav-dropdown'>\r\n                <NavDropdown.Item eventKey='eo'>Esperanto</NavDropdown.Item>\r\n                <NavDropdown.Item eventKey='en'>English</NavDropdown.Item>\r\n                <NavDropdown.Item eventKey='fr'>Fran√ßais</NavDropdown.Item>\r\n              </NavDropdown>\r\n              <Link to='hejmo' className='nav-link'>\r\n                {cxefoj.hejmo}\r\n              </Link>\r\n              <Link to='pri' className='nav-link'>\r\n                {cxefoj.pri}\r\n              </Link>\r\n              <Link to='kial' className='nav-link'>\r\n                {cxefoj.kial}\r\n              </Link>\r\n              <Form inline>\r\n                <a\r\n                  href='https://lernu.net'\r\n                  className='btn btn-depth btn-primary'\r\n                  target='_blank'\r\n                  style={{\r\n                    marginLeft: '1.1rem'\r\n                  }}\r\n                >\r\n                  {cxefoj.lerni}\r\n                </a>\r\n              </Form>\r\n            </Nav>\r\n          </Navbar.Collapse>\r\n        </Container>\r\n      </Navbar>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom'\r\nimport Navbaro from './Aferoj/Navbaro'\r\nimport Sekcio from './Aferoj/Sekcio'\r\nimport './Stiloj/App.css'\r\n\r\nimport cxefoj from './Okazejoj'\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    let okazejo = localStorage.getItem('okazejo')\r\n    if (okazejo) {\r\n      this.fiksuLingvon(okazejo)\r\n    }\r\n  }\r\n\r\n  fiksuLingvon(k) {\r\n    cxefoj.setLanguage(k)\r\n    localStorage.setItem('okazejo', k)\r\n    console.log(cxefoj.hejmo)\r\n    this.setState({})\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Router>\r\n        <>\r\n          <Navbaro fiksuLingvon={this.fiksuLingvon} />\r\n        </>\r\n      </Router>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './Stiloj/Cxefo.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}